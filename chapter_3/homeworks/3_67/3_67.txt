typedef struct {
	long a[2];
	long *p;
} strA;

typedf struct {
	long u[2];
	long q;
} strB;

strB process(strA s) {
	strB r;
	r.u[0] = s.a[1];
	r.u[1] = s.a[0];
	r.q = *s.p;
}

long eval(long x, long y, long z) {
	strA s;
	s.a[0] = x;
	s.a[1] = y;
	s.p = &z;
	strB r = process(s);
	return r.u[0] + r.u[1] + r.q;
}

========================================================================

# strB process(strA s)
 1 process:
 2   movq	%rdi, %rax	# 
 3   movq	%24(%rsp), %rdx	# 
 4   movq	(%rdx), %rdx	# 
 5   movq	16(%rsp), %rcx	# Get s.p
 6   movq	%rcx, (%rdi)	# Compute r.u[0] = ...
 7   movq	8(%rsp), %rcx	# Get s.a[1]
 8   movq	%rcx, 8(%rdi)	# Compute r.u[1] = ...
 9   movq	%rdx, 16(%rdi)	# Compute r.1 = ...
10   ret			# 

# long eval(long x, long y, long z)
# x in %rdi, y in %rsi, z in %rdx
 1 eval:
 2   subq	$104, %rsp	# Allocate 13x8 bytes on stack
 3   movq	%rdx, 24(%rsp)	# Save z on %rsp + 24
 4   leaq	24(%rsp), %rax	# Get &z
 5   movq	%rdi, (%rsp)	# Save x on %rsp + 0
 6   movq	%rsi, 8(%rsp)	# Save y on %rsp + 8
 7   movq	%rax, 16(%rsp)	# Save &z on %rsp + 16
 8   leaq	64(%rsp), %rdi	# 
 9   call	process		# 
10   movq	72(%rsp), %rax	# 
11   addq	64(%rsp), %rax	# 
12   addq	80(%rsp), %rax	# 
13   addq	$104, %rsp	# 
14   ret			# 

========================================================================
A. We can see on line 2 of function eval that it allocates 104 bytes on
   the stack. Diagram the stack frame for eval, showing the values that
   it stores on the stack prior to calling process.

   ...
[  ...	]  <- %rsp + 104
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[   z	] <- %rsp + 24
[  &z	] <- %rsp + 16
[   y	] <- %rsp + 8
[   x	] <- %rsp + 0

========================================================================
B. What value does eval pass in its call to process?

  the value that eval pass is stored in %rsp + 64 which will be the
  variable s

========================================================================
C. How does the code for process access the elements of structure
   argument s? 

  by using %rsp + offset

========================================================================
D. How does the code for process set the fields of result structure r?

  ...
  by using %rdi + offset to access the elements of structure s, and
  using register %rcx and %rdx as the right hand values.

========================================================================
E. Complete your diagram of the stack frame for eval, showing how eval
   accesses the elements of structure r following the return from 
   process.

   ...
[  ...	]  <- %rsp + 104
[  ...	]
[  ...	]
[   z	] <- %rsp+ 80 <- r.q
[   x	] <- %rsp+ 72 <- r.u[1]
[   y	] <- %rsp+ 64 <- r.u[0]
[  ...	]
[  ...	]
[  ...	]
[  ...	]
[   z	] <- %rsp + 24
[  &z	] <- %rsp + 16	<- s.p
[   y	] <- %rsp + 8	<- s.a[1]
[   x	] <- %rsp + 0	<- s.a[0]

========================================================================
F. What general principles can you discern about how structure values 
   are passed as function arguments and how they are returned as
   function results?

  ...
