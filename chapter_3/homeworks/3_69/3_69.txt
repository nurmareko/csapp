typedef struct {
	int first;
	a_struct a[CNT];
	int last;
} b_struct;

void test(long i, b_struct *bp)
{
	int n = bp->first + bp->last;
	a_struct *ap = &bp->a[i];
	ap->x[ap->idx] = n;
}

========================================================================
# void test(long i, b_struct *bp)
# i in %rdi, bp in %rsi
1 test:
2   mov		0x120(%rsi), %ecx		# Get bp->last
3   add		(%rsi), %ecx			# n = bp->first + bp->last
4   lea		(%rdi, %rdi, 4), %rax		# Compute i + i * 4 = 5i
5   lea		(%rsi, %rax, 8), %rax		# Compute bp + 5i * 8 = bp + 40i
6   mov		0x8(%rax), %rdx			# Get bp + 40i + 8
7   movslq	%ecx, %rcx			# Get n, Convert to long
8   mov		%rcx, 0x10(%rax, %rdx, 8)	# Compute ap->x[ap->idx] = (long) n
9   retq					# 

========================================================================
what we know about b_struct
- b_struct follow 8 bytes alignment.
- 4 bytes pad needed after the first field to align the next field a.
- a start from offset 8.
- the last field is at offset + 288 (line 2 disassembly code 0x120 = 288, watchout for that hex!).

what we know about a_struct
- x is of an array of type long (line 7 of disassembly code).
- a_struct follow 8 bytes alignment.
- the first field of a_struct occupy 8 bytes (base on the difference of
  instruction on line 5 and 6).
- idx likely to be the first field of a_sturct.
- idx is type long (bacause the computation on line 8 of disassembly
  code use quad word register).
- the total size of a_struct is 40 bytes (line 5 of disassembly).

========================================================================
A. The value of CNT.
  CNT = (288 - 8) / 40 = 7

========================================================================
B. A complete declaration of structure a_struct. Assume that the only
   fields in this structure are idx and x, and that both of these 
   contain signed values.

tydef struct {
	long idx;
	long x[4];
} a_struct;

------------------------------------------------------------------------
  lets find how many elements in array x
  - a_struct total size is 40
  - x will start from offset 8
  - x is an array of long (8 bytes)

  let val be the number of elements in array x

    40 = 8 + val * 8 

  then we can get val by

    val = (40 - 8) / 8 = 4
