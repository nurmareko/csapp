long sum_col(long n, long A[NR(n)][NC(n)], long j) {
	long i;
	long result = 0;
	for (i = 0; i < NR(n); i++)
		result += A[i][j];
	return result;
}

========================================================================

# long sum_col(long n, long A[NR(n)][NC(n)], long j)
# n in %rdi, A in %rsi, j in %rdx

 1 sum_col:
 2   leaq	1(,%rdi,4), %r8		#   Compute NC(n) = 1 + 4n
 3   leaq	(%rdi,%rdi,2), %rax	#   Compute NR(n) = 3n
 4   movq	%rax, %rdi		#   
 5   testq	%rax, %rax		#   Test NR(n) : 0
 6   jle	.L4			#   if <= goto done
 7   salq	$3, %r8			#   
 8   leaq	(%rsi,%rdx,8), %rcx	#   
 9   movl	$0, %eax		#   
10   movl	$0, %edx		#   
11 .L3:					# forloop:
12   addq	(%rcx), %rax		#   
13   addq	$1, %rdx		#   Increment i
14   addq	%r8, %rcx		#   
15   cmpq	%rdi, %rdx		#   Compare i : NR(n)
16   jne	.L3			#   if != goto forloop
17   rep; ret				#   
18 .L4:					# done:
19   movl	$0, %eax		#   
20   ret				#   

========================================================================
Use your reverse engineering skills to determine the definitions of
NR and NC. 

#define NR(x) (3 * x)
#define NC(x) (1 + 4 * x)