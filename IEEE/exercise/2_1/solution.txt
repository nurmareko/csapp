decimal to binary (msb to lsb)
 Let n be the decimal representation of integer, to find the position
 of all the 1-bits we need to find all power of 2 from largest to
 smallest that fit within n
 example:
			 binary positional
			 2^2    2^1    2^0
  1  = 2^0	       =               [1]
  2  = 2^1             =        [1]    [0]
  3  = 2^1 + 2^0       =        [1]    [1]
  4  = 2^2             = [1]    [0]    [0]
  5  = 2^2 + 2^0       = [1]	[0]    [1]
  6  = 2^2 + 2^1       = [1]    [1]    [0]
  7  = 2^2 + 2^1 + 2^0 = [1]    [1]    [1]
========================================================================
decimal to binary (lsb to msb)
 Converting a decimal number to binary involves dividing the decimal
 number by 2 repeatedly and recording the reaminders. 

 1. Divide the decimal number by 2.
 2. Record the remainder
 3. Update the quotient to be the new dividend.
 4. Repeat step 1-3 until the quotient becomes 0.
 5. The binary equivalent is the sequence of remainders read in reverse
    order.
========================================================================
Question: Does your method extend to convert a finite decimal
representation of a nonintegral rational number, such as 0.1, to its
binary representation?

To convert the fraction part to binary we multiply it by 2 keeping
notice of the resulting integer and fractioal part. Continue 
multiplying by 2 until we get a resulting fractional part equal to zero.
example:

0.375 * 2 = 0 + 0.75
0.75  * 2 = 1 + 0.5
0.5   * 2 = 1 + 0

0.375 = (0.011)

